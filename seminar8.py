# –ó–∞–¥–∞—á–∞ 1. –ù–∞–ø–∏—à–∏—Ç–µ —á–∞—Ç-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –Ω–∞–ø–∏—Å–∞–ª–∏
# –ó–∞–¥–∞—á–∞ 2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—à–µ—Ç id –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
# –ó–∞–¥–∞—á–∞ 3. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
# –ó–∞–¥–∞—á–∞ 4. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

from random import randint
from telebot import types
import telebot
import requests
import re

API_TOKEN = "<API_TOKEN>"
LOG_BOT = "log_bot.txt"
USERS_FILE = "users.txt"
ADMINS_IDS = ('<ID>',)

def new_inline_keyboard(btn_names: list, btn_data_list: list, row_wight=1):
    markup = types.InlineKeyboardMarkup(row_width=row_wight)
    for i in range(len(btn_names)):
        markup.add(types.InlineKeyboardButton(btn_names[i], callback_data=btn_data_list[i]))
    return markup

def read_file(filename: str):
    with open(filename, mode='r', encoding='UTF-8') as file:
        lines = file.readlines()
    for i in range(len(lines)):
        lines[i] = lines[i].replace('\n','')
    return lines

def write_file(filename: str, data):
    with open(filename, mode='a', encoding='UTF-8') as file:
        file.write(data + "\n")

def write_log(message, text=None):
    from datetime import datetime
    line = f"{datetime.now()} {message.from_user.first_name} {message.from_user.last_name} {message.from_user.username}: "
    if text == None:
        line += f"{message.text}"
    else:
        line += text
    write_file(LOG_BOT, line)

bot = telebot.TeleBot(API_TOKEN)

@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id in ADMINS_IDS:
        markup = new_inline_keyboard(['üì® –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'], ['send_all'])
        text = "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"
    else:
        markup = new_inline_keyboard(['üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'], ['btn1'])
        text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!"
    bot.send_message(message.from_user.id, text, reply_markup=markup)

@bot.callback_query_handler(lambda x: x.data == 'btn1')
def register_user(message):
    print(message.from_user.id)
    print(read_file(USERS_FILE))
    if str(message.from_user.id) not in read_file(USERS_FILE):
        write_file(USERS_FILE, f"{message.from_user.id}")
        write_log(message, text="BOT: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        bot.send_message(message.from_user.id, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω))")
        write_log(message, text="BOT: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        write_log(message, text="BOT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        bot.send_message(message.from_user.id, "–ë—Ä–æ, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∞–Ω!")

@bot.callback_query_handler(lambda x: x.data == 'send_all')
def send_all(message):
    for id in read_file(USERS_FILE):
        bot.send_message(id, "–°–æ–≤–µ—â–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
        write_log(message, text="BOT: –ê–¥–º–∏–Ω —Å–¥–µ–ª–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")

@bot.message_handler(content_types=['text'])
def text_message(message):
    write_log(message)

bot.polling()
