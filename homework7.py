# –ó–∞–¥–∞—á–∞ 1. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥ –º–µ—Ç–æ–¥–∞ map()
def custom_map(func, obj):
    return (func(i) for i in obj)

def task1():
    lst = [2, 3, 4, 5]
    print(list(custom_map(lambda x: x**3, lst)))

# –ó–∞–¥–∞—á–∞ 2. –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
def retry(count):
    def our_repeat(func):
        def decorator(*args, **kwargs):
            for _ in range(1, count + 1):
                print(f"–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ{_}")
                print(func(*args, **kwargs))
        return decorator
    return our_repeat

@retry(5)
def custom_pow(num = 5, pow = 4):
    return num ** pow

# –ó–∞–¥–∞—á–∞ 3. –î–æ–±–∞–≤—å—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ". –ë–æ—Ç –∑–∞–≥–∞–¥—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000.
# –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ —É–≥–∞–¥—ã–≤–∞–µ—Ç –µ–≥–æ, –±–æ—Ç –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Ö–æ–¥–æ–≤
from random import randint
from telebot import types
import telebot
import requests
import re

API_TOKEN = "<API_TOKEN>"
GAME_PARAMS = {
    'in_game': False,
    'count_of_trying': 0,
    'number': 0
}
CATS_NUMS = (100, 101, 102, 103, 200, 201, 202, 203, 204, 206, 207, 300, 301, 302, 303, 304, 305, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 429, 431, 444, 450, 451, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 521, 522, 523, 525, 599)

def default_game_params():
    GAME_PARAMS['in_game'] = False
    GAME_PARAMS['count_of_trying'] = 0
    GAME_PARAMS['number'] = 0

def new_inline_keyboard(btn_names: list, row_wight=1):
    markup = types.InlineKeyboardMarkup(row_width=row_wight)
    for i in range(len(btn_names)):
        markup.add(types.InlineKeyboardButton(btn_names[i], callback_data=f'btn{i+1}'))
    return markup

bot = telebot.TeleBot(API_TOKEN)

# –û–±—â–∞–µ–º—Å—è —Å –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤. –ö–æ–¥ –Ω–∏–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥ help, start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = new_inline_keyboard(['üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è', '‚òÄÔ∏è –ü–æ–¥–≥–ª—è–¥–µ—Ç—å –ø–æ–≥–æ–¥—É', 'üê± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–æ—Ç–∏–∫–∞', 'üé≤ –°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É'])
    bot.send_message(message.from_user.id, """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —Ç–µ—Å—Ç-–±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ Python. \
–Ø –ø–æ–∫–∞ –µ—â—ë —Ç—É–ø–æ–≤–∞—Ç, –Ω–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–æ–∑–¥–∞–ª, –Ω–∞–¥–µ—é—Å—å, —Å–¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —É–º–Ω—ã–º)\
""", reply_markup=markup)

@bot.callback_query_handler(lambda x: x.data == 'btn1')
def send_hello(message):
    bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}")

@bot.callback_query_handler(lambda x: x.data == 'btn2')
def send_weather(message):
    try: 
        request = requests.get('http://wttr.in/?0T')
        text = request.text
    except:  text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã—Å—à–∏–µ —Å–∏–ª—ã –Ω–µ –∂–µ–ª–∞—é—Ç –í–∞–º —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –ø–ª–∞–Ω—ã –ø—Ä–∏—Ä–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∏–º –ø–æ–∑–¥–Ω–µ–µ"
    finally: bot.send_message(message.from_user.id, text)

@bot.callback_query_handler(lambda x: x.data == 'btn3')
def send_cat(message):
    try:
        request = requests.get(f'https://http.cat/{CATS_NUMS[randint(0, len(CATS_NUMS))]}')
        bot.send_photo(message.from_user.id, request.content)
    except:
        bot.send_message(message.from_user.id, "–Ø —Å–æ–∂–∞–ª–µ—é, –Ω–æ –∫–æ—Ç–∏–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ —Ö–æ—Ç—è—Ç, —á—Ç–æ–±—ã –Ω–∞ –Ω–∏—Ö —Å–º–æ—Ç—Ä–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –Ω–∏—Ö –ø–æ–∑–∂–µ")

@bot.callback_query_handler(lambda x: x.data == 'btn4')
def new_game(message):
    if GAME_PARAMS['in_game']:
        bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
    else:
        GAME_PARAMS['number'] = randint(1, 1000)
        GAME_PARAMS['in_game'] = True
        bot.send_message(message.from_user.id, "C—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É \"–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\". –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 1000. –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ —É–≥–∞–¥–∞–µ—à—å, —Ç–µ–º —Ç—ã –∫—Ä—É—á–µ. –ü–æ–µ—Ö–∞–ª–∏!")
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")

@bot.message_handler(func=lambda message: re.match("\d+", message.text) and GAME_PARAMS['in_game'])
def in_game(message):
    user_num = int(message.text)
    if 0 < user_num < 1001:
        if user_num == GAME_PARAMS['number']:
            if GAME_PARAMS['count_of_trying'] == 1:
                bot.send_message(message.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –æ—Ç–≥–∞–¥–∞–ª —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏! –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {GAME_PARAMS['number']}")
            else:
                bot.send_message(message.from_user.id, f"–£—Ä–∞! –¢—ã —É–≥–∞–¥–∞–ª! –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {GAME_PARAMS['number']}. –ö–æ–ª-–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {GAME_PARAMS['count_of_trying']}")
            default_game_params()
        else:
            bot.send_message(message.from_user.id, f"–¢—ã –ø–æ–∫–∞ –Ω–µ —É–≥–∞–¥–∞–ª. –ú–æ—ë —á–∏—Å–ª–æ {'–º–µ–Ω—å—à–µ' if GAME_PARAMS['number'] < user_num else '–±–æ–ª—å—à–µ'} —Ç–≤–æ–µ–≥–æ")
            GAME_PARAMS['count_of_trying'] += 1
            bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")
    else:
        bot.send_message(message.from_user.id, f"–¢–≤–æ—ë —á–∏—Å–ª–æ ({user_num}) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–∏–∞–ø–æ–∑–æ–Ω–∞ –æ—Ç 1 –¥–æ 1000 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ")
        bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ: ")

bot.polling()
